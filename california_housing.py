# -*- coding: utf-8 -*-
"""california_housing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pp1-Ma2Zp0NpLFXlOz21IkUrNJn4MDMn
"""

from sklearn.datasets import fetch_california_housing
import pandas as pd

california_housing = fetch_california_housing()
data = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)
data['MedHouseVal'] = california_housing.target

import matplotlib.pyplot as plt
import seaborn as sns

# Distribución del valor mediano de las casas
sns.distplot(data['MedHouseVal'], bins=30)
plt.show()

# Por ejemplo, podemos ver la relación entre 'MedInc' (ingreso medio) y 'MedHouseVal'
plt.scatter(data['MedInc'], data['MedHouseVal'])
plt.xlabel("Ingreso Medio")
plt.ylabel("Valor Mediano de la Casa")
plt.title("Relación entre Ingreso Medio y Valor de la Casa")
plt.show()

# prompt: data.describe

data.describe()

data.head()

from sklearn.model_selection import train_test_split

X = data[['MedInc']]  # Elegimos 'MedInc' como nuestra característica para este ejemplo
Y = data['MedHouseVal']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=5)

from sklearn.linear_model import LinearRegression

# Crear el modelo de regresión lineal
lin_model = LinearRegression()

# Entrenar el modelo con los datos de entrenamiento
lin_model.fit(X_train, Y_train)

from sklearn.metrics import mean_squared_error, r2_score

# Predecir los valores para el conjunto de prueba
Y_pred = lin_model.predict(X_test)

# Calcular el MSE y el R²
mse = mean_squared_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)

print("Error Cuadrático Medio (MSE):", mse)
print("Coeficiente de Determinación (R²):", r2)

plt.scatter(X_test, Y_test, color='gray')
plt.plot(X_test, Y_pred, color='red', linewidth=2)
plt.xlabel('Ingreso Medio')
plt.ylabel('Valor Mediano de la Casa')
plt.title('Línea de Regresión Lineal')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Calculamos la matriz de correlación
corr = data.corr()

# Configuramos el tamaño del gráfico
plt.figure(figsize=(10, 6))

# Creamos el heatmap
sns.heatmap(corr, annot=True, fmt=".2f", square=True, cmap='coolwarm')

# Mostramos el gráfico
plt.show()

# prompt: data explicar columnas

data.describe()

# Por ejemplo, podemos ver la relación entre 'MedInc' (ingreso medio) y 'MedHouseVal'
plt.scatter(data['AveRooms'], data['MedHouseVal'])
plt.xlabel("Ingreso Medio")
plt.ylabel("Valor Mediano de la Casa")
plt.title("Relación entre Ingreso Medio y Valor de la Casa")
plt.show()

# prompt: crea un array   llamado features que sea igual a los nombres de  todas las columnas menos medhouseval

features = california_housing.feature_names[:-1]
features

X = data[features]
Y = data['MedHouseVal']

# Dividir los datos en conjuntos de entrenamiento y prueba
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=5)

from sklearn.linear_model import LinearRegression

# Crear el modelo
multi_lin_model = LinearRegression()

# Entrenar el modelo
multi_lin_model.fit(X_train, Y_train)

from sklearn.metrics import mean_squared_error, r2_score

# Predecir los valores para el conjunto de prueba
Y_pred = multi_lin_model.predict(X_test)

# Calcular el MSE y el R²
mse = mean_squared_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)

print("Error Cuadrático Medio (MSE):", mse)
print("Coeficiente de Determinación (R²):", r2)

